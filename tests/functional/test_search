import sys
import os
import pytest

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

import pytest
import json
from pathlib import Path
from app import app
from db import db
from models import Recipe, Ingredient, Reqs, Comments

def test_home_page(client):
    """Test that the home page loads and displays recipes."""
    response = client.get('/')
    assert response.status_code == 200
    assert b'Pasta with Tomato Sauce' in response.data
    assert b'Garlic Bread' in response.data

def test_recipe_list(client):
    """Test that the recipe list page loads correctly."""
    response = client.get('/recipes')
    assert response.status_code == 200
    assert b'Pasta with Tomato Sauce' in response.data
    assert b'Garlic Bread' in response.data

def test_recipe_search(client):
    """Test searching for recipes."""
    response = client.get('/recipes?query=Pasta&filterType=title')
    assert response.status_code == 200
    assert b'Pasta with Tomato Sauce' in response.data
    assert b'Garlic Bread' not in response.data

def test_recipe_search_by_cuisine(client):
    """Test filtering recipes by cuisine."""
    response = client.get('/recipes?query=&filterType=cuisine&cuisine=Italian')
    assert response.status_code == 200
    assert b'Italian' in response.data
    assert b'Pasta with Tomato Sauce' in response.data
    assert b'Garlic Bread' in response.data

def test_recipe_search_no_results(client):
    """Test search with no matching results."""
    response = client.get('/recipes?query=NonExistentRecipe&filterType=title')
    assert response.status_code == 200
    assert b'Pasta with Tomato Sauce' not in response.data
    assert b'Garlic Bread' not in response.data

def test_recipe_search_difficulty(client):
    """Test filtering recipes by difficulty."""
    response = client.get('/recipes?query=&filterType=difficulty&difficulty=Easy')
    assert response.status_code == 200
    assert b'Pasta with Tomato Sauce' in response.data
    assert b'Garlic Bread' in response.data
    
    # Add a medium difficulty recipe and test filtering
    with app.app_context():
        medium_recipe = Recipe(
            title="Complex Dish",
            instructions="Many steps...",
            cuisine="French",
            cook_time=60,
            difficulty="Medium"
        )
        db.session.add(medium_recipe)
        db.session.commit()
    
    # Now search for only Medium difficulty
    response = client.get('/recipes?query=&filterType=difficulty&difficulty=Medium')
    assert response.status_code == 200
    assert b'Complex Dish' in response.data
    assert b'Pasta with Tomato Sauce' not in response.data